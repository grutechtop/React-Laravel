import { useEffect, useState } from 'react'
import Head from 'next/head'
import NavBar from '../components/Nav'
import { toast, ToastContainer } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import Modal from '../components/Modal'
import axios from 'axios'

export default function Products() {
  const columns = ['Name', 'Description', 'Price', 'Edit']
  const [products, setProducts] = useState('')
  const [isOpen, setIsOpen] = useState(false)

  const openModal = () => {
    setIsOpen(true)
  }

  const closeModal = () => {
    setIsOpen(false)
  }

  const handleSubmit = data => {
    addProduct(data)
    closeModal()
  }

  const addProduct = ({ iteName, description, price }) => {
    const access_token = localStorage.getItem('access_token')
    axios
      .post(
        'http://127.0.0.1:8000/api/products',
        {
          name: iteName,
          description: description,
          price: price,
        },
        {
          headers: {
            'content-type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            Authorization: 'Bearer ' + access_token,
          },
        },
        {
          withCredentials: true,
        }
      )
      .then(response => {
        toast.success(`${response.data.message}`, {
          position: 'top-right',
          autoClose: 1000,
          pauseOnHover: false,
        })
        getProducts()
      })
      .catch(error => {
        toast.error(`${error.message}`, {
          position: 'top-right',
          autoClose: 1000,
          pauseOnHover: false,
        })
      })
  }

  const getProducts = () => {
    const access_token = localStorage.getItem('access_token')
    axios
      .get(
        'http://127.0.0.1:8000/api/products',
        {
          headers: {
            'content-type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            Authorization: 'Bearer ' + access_token,
          },
        },
        {
          withCredentials: true,
        }
      )
      .then(response => {
        setProducts(response.data)
      })
      .catch(error => {
        toast.error(`${error.message}`, {
          position: 'top-right',
          autoClose: 1000,
          pauseOnHover: false,
        })
      })
  }

  const deleteProduct = productID => {
    if (confirm('Are you sure you want to delete this user?')) {
      const access_token = localStorage.getItem('access_token')
      axios
        .delete(
          `http://127.0.0.1:8000/api/products/${productID}`,
          {
            headers: {
              'content-type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              Authorization: 'Bearer ' + access_token,
            },
          },
          {
            withCredentials: true,
          }
        )
        .then(response => {
          toast.success(`${response.data.message}`, {
            position: 'top-right',
            autoClose: 1000,
            pauseOnHover: false,
          })
          getProducts()
        })
        .catch(error => {
          toast.error(`${error.message}`, {
            position: 'top-right',
            autoClose: 1000,
            pauseOnHover: false,
          })
        })
    }
  }

  useEffect(() => {
    getProducts()
  }, [])

  return (
    <div className="animate__animated animate__fadeIn">
      <NavBar />
      <div className="flex flex-col flex-wrap items-center justify-center mt-24">
        <Head>
          <title>products</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <ToastContainer />
        <div className="flex justify-center mb-9">
          <button
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            onClick={openModal}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 1024 1024">
              <path fill="currentColor" d="M352 480h320a32 32 0 1 1 0 64H352a32 32 0 0 1 0-64z" />
              <path fill="currentColor" d="M480 672V352a32 32 0 1 1 64 0v320a32 32 0 0 1-64 0z" />
              <path
                fill="currentColor"
                d="M512 896a384 384 0 1 0 0-768a384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896a448 448 0 0 1 0 896z"
              />
            </svg>
          </button>
          <Modal
            isOpen={isOpen}
            onClose={closeModal}
            onSubmit={handleSubmit}
            title={'Add New Product'}
          ></Modal>
        </div>
        {products ? (
          <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div className="inline-block py-2 min-w-full sm:px-6 lg:px-8">
              <div className="overflow-hidden shadow-md sm:rounded-lg">
                <table className="min-w-full">
                  <thead className="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      {columns.map((name, index) => {
                        return (
                          <th
                            key={index}
                            scope="col"
                            className="py-3 px-6 text-xs font-medium tracking-wider text-left text-gray-700 uppercase dark:text-gray-400"
                          >
                            {name}
                          </th>
                        )
                      })}
                    </tr>
                  </thead>
                  <tbody>
                    {products.map(product => {
                      return (
                        <tr
                          key={product.id}
                          className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
                        >
                          <td className="py-4 px-6 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            {product.name}
                          </td>
                          <td className="py-4 px-6 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            {product.description}
                          </td>
                          <td className="py-4 px-6 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            ${product.price}
                          </td>
                          <td className="py-4 px-6 text-sm font-medium text-right whitespace-nowrap">
                            {/* <div className="text-blue-500 hover:underline">
                              <Link href="/edit">Edit</Link>
                            </div> */}
                            <div>
                              <button
                                onClick={() => deleteProduct(product.id)}
                                className="text-red-500 hover:underline"
                              >
                                Delete
                              </button>
                            </div>
                          </td>
                        </tr>
                      )
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex justify-center items-center p-10">
            <svg
              version="1.1"
              id="loader-1"
              xmlns="http://www.w3.org/2000/svg"
              x="0px"
              y="0px"
              width="40px"
              height="40px"
              viewBox="0 0 40 40"
              enableBackground="new 0 0 40 40"
              xmlSpace="preserve"
            >
              <path
                opacity="0.2"
                fill="#000"
                d="M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946
    s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634
    c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z"
              />
              <path
                fill="#000"
                d="M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0
    C22.32,8.481,24.301,9.057,26.013,10.047z"
              >
                <animateTransform
                  attributeType="xml"
                  attributeName="transform"
                  type="rotate"
                  from="0 20 20"
                  to="360 20 20"
                  dur="0.5s"
                  repeatCount="indefinite"
                />
              </path>
            </svg>
          </div>
        )}
      </div>
    </div>
  )
}
